package src

import (
	"fmt"
	"os"
	"regexp"
	"sf/src/sfacg"
	"strconv"
	"strings"
)

type AutoGenerated struct {
	ID       string `json:"id"`
	Title    string `json:"title"`
	Index    int    `json:"index"`
	IsVip    bool   `json:"is_vip"`
	VolumeID string `json:"volume_id"`
	Content  string `json:"content"`
}

func GetCatalogue(BookData Books) {
	response, TestInfo := sfacg.Get_catalogue_detailed_by_id(BookData.NovelID), TestInit(BookData.NovelName)
	var orderList []string
	for _, data := range response.Data.VolumeList {
		fmt.Println("start download volume: ", data.Title)
		for _, Chapter := range data.ChapterList {
			ChapId := strconv.Itoa(Chapter.ChapID)
			if Chapter.OriginNeedFireMoney > 0 {
				orderList = append(orderList, strconv.Itoa(Chapter.ChapID))
				continue
			}
			if !TestInfo.In(ChapId) {
				GetContent(len(data.ChapterList), strconv.Itoa(data.VolumeID), ChapId, TestInfo)
			}
		}
	}

	if len(orderList) != 0 {
		fmt.Println(len(orderList), "is no need to download")
	}
	TestInfo.merge(response.Data.VolumeList)
	TestInfo.SaveContent()
	fmt.Println("NovelName:", BookData.NovelName, "download complete!")
}

func GetContent(ChapterLength int, VolumeID, cid string, TestInfo *TestChapterConfig) {
	response := sfacg.Get_content_detailed_by_cid(cid)
	if response.Status.HTTPCode != 200 {
		if response.Status.Msg == "接口校验失败,请尽快把APP升级到最新版哦~" {
			fmt.Println(response.Status.Msg)
			os.Exit(0)
		} else {
			fmt.Println(response.Status.Msg)
		}
	}
	contentList := ""
	for _, line := range strings.Split(response.Data.Expand.Content, "\n") {
		line = strings.Replace(line, "　", "", -1)
		if regexp.MustCompile(`\S`).MatchString(line) {
			contentList += regexp.MustCompile(`(^\s*)`).ReplaceAllString(line, "\n　　")
		}
	}
	TestInfo.ChapterInfo = append(TestInfo.ChapterInfo, ChapterJson{
		ID:       cid,
		Title:    response.Data.Title,
		Index:    response.Data.ChapOrder,
		IsVip:    response.Data.IsVip,
		VolumeID: VolumeID,
		Content:  contentList,
	})
	fmt.Printf(
		"download Volume No:%d: %s : %d/%d  %v\r",
		response.Data.Sno, response.Data.Title, response.Data.ChapOrder, ChapterLength, response.Data.Title,
	)
}
