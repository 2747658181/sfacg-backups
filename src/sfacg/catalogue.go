package sfacg

import (
	"encoding/json"
	"fmt"
	"os"
	"regexp"
	"sf/src/request"
	"strconv"
	"strings"
)

var (
	Catalogue     = CatalogueJson{}
	ContentStruct = ContentJson{}
)

type AutoGenerated struct {
	ID       string `json:"id"`
	Title    string `json:"title"`
	Index    int    `json:"index"`
	IsVip    bool   `json:"is_vip"`
	VolumeID string `json:"volume_id"`
	Content  string `json:"content"`
}

func GetCatalogue(BookData Books) {
	response := request.Get("novels/" + BookData.NovelID + "/dirs?expand=originNeedFireMoney")
	if err := json.Unmarshal(response, &Catalogue); err != nil {
		panic(err)
	}
	TestInfo := TestInit(BookData.NovelName)
	var orderList []string
	for _, data := range Catalogue.Data.VolumeList {
		fmt.Println("start download volume: ", data.Title)
		for _, Chapter := range data.ChapterList {
			ChapId := strconv.Itoa(Chapter.ChapID)
			if Chapter.OriginNeedFireMoney > 0 {
				orderList = append(orderList, strconv.Itoa(Chapter.ChapID))
				continue
			}
			if !TestInfo.In(ChapId) {
				GetContent(len(data.ChapterList), strconv.Itoa(data.VolumeID), ChapId, TestInfo)
			}
		}
	}

	if len(orderList) != 0 {
		fmt.Println(len(orderList), "is no need to download")
	}
	TestInfo.merge(Catalogue.Data.VolumeList)
	TestInfo.SaveContent()
	fmt.Println("NovelName:", BookData.NovelName, "download complete!")
}
func TestMassage(ContentStruct ContentJson) {
	if ContentStruct.Status.HTTPCode != 200 {
		if ContentStruct.Status.Msg == "接口校验失败,请尽快把APP升级到最新版哦~" {
			fmt.Println(ContentStruct.Status.Msg)
			os.Exit(0)
		} else {
			fmt.Println(ContentStruct.Status.Msg)
		}
	}
}

func GetContent(ChapterLength int, VolumeID, cid string, TestInfo *TestChapterConfig) {
	response := request.Get(fmt.Sprintf("Chaps/%v?expand=content&autoOrder=true", cid))
	if err := json.Unmarshal(response, &ContentStruct); err == nil {
		TestMassage(ContentStruct)

	}
	contentList := ""
	for _, line := range strings.Split(ContentStruct.Data.Expand.Content, "\n") {
		line = strings.Replace(line, "　", "", -1)
		if regexp.MustCompile(`\S`).MatchString(line) {
			contentList += regexp.MustCompile(`(^\s*)`).ReplaceAllString(line, "\n　　")
		}
	}
	TestInfo.ChapterInfo = append(TestInfo.ChapterInfo, ChapterJson{
		ID:       cid,
		Title:    ContentStruct.Data.Title,
		Index:    ContentStruct.Data.ChapOrder,
		IsVip:    ContentStruct.Data.IsVip,
		VolumeID: VolumeID,
		Content:  contentList,
	})
	fmt.Printf(
		"download Volume No:%d: %s : %d/%d  %v\r",
		ContentStruct.Data.Sno, ContentStruct.Data.Title, ContentStruct.Data.ChapOrder, ChapterLength, ContentStruct.Data.Title,
	)
}
